scalar Datetime

type Query {
  users: [User]
  avos(skip: Int, take: Int, where: AvoWhereInput): [Avocado]!
  avo(id: ID!): Avocado
}

type Mutation {
  createUser(data: createUserInput!): User!
  createAvo(data: AvoCreateInput!): Avocado!
}

type User {
  id: Int!
  name: String!
  username: String!
  email: String!
  avatar: String
  website: String
  description: String
  password: String!
  createdAt: Datetime!
}

input createUserInput {
  name: String!
  username: String!
  email: String!
  password: String!
}

type Attributes {
  id: ID!
  description: String
  shape: String
  hardiness: String
  taste: String
  avocadoID: Int
}

type Avocado {
  id: ID!
  createdAt: Datetime!
  updatedAt: Datetime
  deletedAt: Datetime
  name: String!
  sku: String!
  price: Float!
  image: String!
  attributes: Attributes!
}

input StringFilterInput {
  equals: String
  in: [String]
  notIn: [String]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: String
}

input AvoWhereInput {
  name: StringFilterInput
  price: Float
}

input AvoCreateInput {
  name: String!
  price: Float!
  sku: String!
  image: String!
  description: String
  shape: String
  hardiness: String
  taste: String
}
